package seyyed.ali.tabatabaei.zamanakCore.modelimport org.junit.Beforeimport org.junit.Testimport org.junit.Assert.*import seyyed.ali.tabatabaei.zamanakCore.ZamanakCoreimport seyyed.ali.tabatabaei.zamanakCore.model.enums.CalendarTypeimport seyyed.ali.tabatabaei.zamanakCore.model.enums.TimeUnitTypeimport java.util.TimeZoneclass ZamanakCoreTest{    private lateinit var zamanakCore : ZamanakCore    private val jDate = JalaliDate(1404 , 1 , 18)    private val gDate = GregorianDate(2025 , 4 , 7)    private val clock = Clock(13 , 15 , 30)    private val timeMillis : Long = 1744019130925 / 1000    @Before    fun setup() {        zamanakCore = ZamanakCore().setDateFromGregorian(gDate).setClock(clock)    }    @Test    fun `Set new clock`() {        val newClock = Clock(14 , 35 , 15)        zamanakCore.setClock(newClock)        assertEquals(14 , zamanakCore.clock.hour)        assertEquals(35 , zamanakCore.clock.minute)        assertEquals(15 , zamanakCore.clock.second)    }    @Test    fun `Set date from jalali date`() {        val newJalali = JalaliDate(1403, 12, 30)        val newGregorian = GregorianDate(2025 , 3 , 20)        zamanakCore.setDateFromJalali(newJalali)        assertEquals(newJalali.year, zamanakCore.jalaliDate.year)        assertEquals(newJalali.month, zamanakCore.jalaliDate.month)        assertEquals(newJalali.dayOfMonth, zamanakCore.jalaliDate.dayOfMonth)        assertEquals(newGregorian.year, zamanakCore.gregorianDate.year)        assertEquals(newGregorian.month, zamanakCore.gregorianDate.month)        assertEquals(newGregorian.dayOfMonth, zamanakCore.gregorianDate.dayOfMonth)    }    @Test    fun `Set date from jalali gregorian`() {        val newGregorian = GregorianDate(2023, 4, 10)        val newJalali = JalaliDate(1402 , 1 , 21)        zamanakCore.setDateFromGregorian(newGregorian)        assertEquals(newJalali.year, zamanakCore.jalaliDate.year)        assertEquals(newJalali.month, zamanakCore.jalaliDate.month)        assertEquals(newJalali.dayOfMonth, zamanakCore.jalaliDate.dayOfMonth)        assertEquals(newGregorian.year, zamanakCore.gregorianDate.year)        assertEquals(newGregorian.month, zamanakCore.gregorianDate.month)        assertEquals(newGregorian.dayOfMonth, zamanakCore.gregorianDate.dayOfMonth)    }    @Test    fun `Set date from time in millis`() {        val newGregorian = GregorianDate(2023, 4, 10)        val newJalali = JalaliDate(1402 , 1 , 21)        zamanakCore.setDateFromTimeInMillis(1681116417000)        assertEquals(newJalali.year, zamanakCore.jalaliDate.year)        assertEquals(newJalali.month, zamanakCore.jalaliDate.month)        assertEquals(newJalali.dayOfMonth, zamanakCore.jalaliDate.dayOfMonth)        assertEquals(newGregorian.year, zamanakCore.gregorianDate.year)        assertEquals(newGregorian.month, zamanakCore.gregorianDate.month)        assertEquals(newGregorian.dayOfMonth, zamanakCore.gregorianDate.dayOfMonth)    }    @Test    fun `Get time in millis`() {        val currentTime = zamanakCore.toMillis() / 1000        assertEquals(currentTime, timeMillis)    }    @Test    fun `Get start of day`() {        val startOfDay = zamanakCore.getStartOfDay()        assertEquals(jDate.year, startOfDay.jalaliDate.year)        assertEquals(jDate.month, startOfDay.jalaliDate.month)        assertEquals(jDate.dayOfMonth, startOfDay.jalaliDate.dayOfMonth)        assertEquals(gDate.year, startOfDay.gregorianDate.year)        assertEquals(gDate.month, startOfDay.gregorianDate.month)        assertEquals(gDate.dayOfMonth, startOfDay.gregorianDate.dayOfMonth)        assertEquals(0, startOfDay.clock.hour)        assertEquals(0, startOfDay.clock.minute)        assertEquals(0, startOfDay.clock.second)    }    @Test    fun `Get end of day`() {        val endOfDay = zamanakCore.getEndOfDay()        assertEquals(jDate.year, endOfDay.jalaliDate.year)        assertEquals(jDate.month, endOfDay.jalaliDate.month)        assertEquals(jDate.dayOfMonth, endOfDay.jalaliDate.dayOfMonth)        assertEquals(gDate.year, endOfDay.gregorianDate.year)        assertEquals(gDate.month, endOfDay.gregorianDate.month)        assertEquals(gDate.dayOfMonth, endOfDay.gregorianDate.dayOfMonth)        assertEquals(23, endOfDay.clock.hour)        assertEquals(59, endOfDay.clock.minute)        assertEquals(59, endOfDay.clock.second)    }    @Test    fun `Check is today`() {        assertTrue(!zamanakCore.isToday())    }    @Test    fun `Set time zone`() {        val newDate = zamanakCore.setTimeZone(TimeZone.getTimeZone("UTC"))        assertEquals(jDate.year, newDate.jalaliDate.year)        assertEquals(jDate.month, newDate.jalaliDate.month)        assertEquals(jDate.dayOfMonth, newDate.jalaliDate.dayOfMonth)        assertEquals(gDate.year, newDate.gregorianDate.year)        assertEquals(gDate.month, newDate.gregorianDate.month)        assertEquals(gDate.dayOfMonth, newDate.gregorianDate.dayOfMonth)        assertEquals(9, newDate.clock.hour)        assertEquals(45, newDate.clock.minute)        assertEquals(30, newDate.clock.second)    }    @Test    fun `Check date is before`() {        val newZamanakCore1 = ZamanakCore().setDateFromGregorian(gDate).setClock(clock).addDate(            CalendarType.Gregorian , TimeUnitType.SECOND , 5)        assertTrue(zamanakCore.isBefore(newZamanakCore1))        val newZamanakCore2 = ZamanakCore().setDateFromGregorian(gDate).setClock(clock).subDate(            CalendarType.Gregorian , TimeUnitType.SECOND , 5)        assertTrue(!zamanakCore.isBefore(newZamanakCore2))    }    @Test    fun `Check date is after`() {        val newZamanakCore1 = ZamanakCore().setDateFromGregorian(gDate).setClock(clock).addDate(            CalendarType.Gregorian , TimeUnitType.SECOND , 5)        assertTrue(!zamanakCore.isAfter(newZamanakCore1))        val newZamanakCore2 = ZamanakCore().setDateFromGregorian(gDate).setClock(clock).subDate(            CalendarType.Gregorian , TimeUnitType.SECOND , 5)        assertTrue(zamanakCore.isAfter(newZamanakCore2))    }    @Test    fun `Check date is equals`() {        val newZamanakCore1 = ZamanakCore().setDateFromGregorian(gDate).setClock(clock)        assertTrue(zamanakCore.equalsDate(newZamanakCore1))    }}