package seyyed.ali.tabatabaei.zamanakCore.modelimport org.junit.Assert.*import org.junit.Testimport seyyed.ali.tabatabaei.zamanakCore.model.enums.Languageimport seyyed.ali.tabatabaei.zamanakCore.utils.Constanseclass JalaliDateTest {    @Test    fun `test isLeapYear - leap year`() {        assertTrue(JalaliDate(1399, 1, 1).isLeapYear())        assertTrue(JalaliDate(1403, 1, 1).isLeapYear())        assertTrue(JalaliDate(1408, 1, 1).isLeapYear())    }    @Test    fun `test isLeapYear - non-leap year`() {        assertFalse(JalaliDate(1407, 1, 1).isLeapYear())        assertFalse(JalaliDate(1404, 1, 1).isLeapYear())        assertFalse(JalaliDate(1405, 1, 1).isLeapYear())    }    @Test    fun `test getDaysRemainingInYear - normal year`() {        val date = JalaliDate(1404, 1, 18)        assertEquals(347, date.getDaysRemainingInYear())    }    @Test    fun `test getDaysRemainingInYear - leap year`() {        val date = JalaliDate(1403, 1, 18)        assertEquals(348, date.getDaysRemainingInYear())    }    @Test    fun `test getDayInYear`() {        val date = JalaliDate(1403, 2, 1)        assertEquals(32, date.getDayInYear())    }    @Test    fun `test getNumberOfDaysInYear - normal year`() {        val date = JalaliDate(1404, 1, 18)        assertEquals(365, date.getNumberOfDaysInYear())    }    @Test    fun `test getNumberOfDaysInYear - leap year`() {        val date = JalaliDate(1403, 1, 18)        assertEquals(366, date.getNumberOfDaysInYear())    }    @Test    fun `test getMonthName - persian`() {        val date = JalaliDate(1403, 1, 1)        assertEquals(Constanse.jalaliPersianMonths[0], date.getMonthName(Language.PERSIAN))    }    @Test    fun `test getMonthName - english`() {        val date = JalaliDate(1403, 1, 1)        assertEquals(Constanse.jalaliEnglishMonths[0], date.getMonthName(Language.ENGLISH))    }    @Test    fun `test getQuarterNumber`() {        val date = JalaliDate(1403, 5, 1)        assertEquals(2, date.getQuarterNumber())    }    @Test    fun `test getQuarter - persian`() {        val date = JalaliDate(1403, 5, 1)        assertEquals(Constanse.seasonsPersian[1], date.getQuarter(Language.PERSIAN))    }    @Test    fun `test getQuarter - english`() {        val date = JalaliDate(1403, 5, 1)        assertEquals(Constanse.seasonsEnglish[1], date.getQuarter(Language.ENGLISH))    }    @Test    fun `test getWeekNumberOfYear`() {        val date = JalaliDate(1403, 1, 15)        assertEquals(3, date.getWeekNumberOfYear())    }    @Test    fun `test getDaysInMonth - ordinary`() {        val date = JalaliDate(1403, 1, 1)        assertEquals(31, date.getDaysInMonth())    }    @Test    fun `test getDaysInMonth - leap year esfand`() {        val date = JalaliDate(1408, 12, 1)        assertEquals(30, date.getDaysInMonth())    }    @Test    fun `test getDaysInMonth - non-leap year esfand`() {        val date = JalaliDate(1404, 12, 1)        assertEquals(29, date.getDaysInMonth())    }    @Test    fun `test getWeekdayName - persian`() {        val date = JalaliDate(1403, 1, 1)        val result = date.getWeekdayName(Language.PERSIAN)        assertTrue(Constanse.persianDayOfTheWeek.contains(result))    }    @Test    fun `test getWeekdayName - english`() {        val date = JalaliDate(1403, 1, 1)        val result = date.getWeekdayName(Language.ENGLISH)        assertTrue(Constanse.englishDayOfTheWeek.contains(result))    }    @Test    fun `test getWeekday`() {        val date = JalaliDate(1403, 1, 1)        val result = date.getWeekdayNumber()        assertTrue(result in 1..7)    }}