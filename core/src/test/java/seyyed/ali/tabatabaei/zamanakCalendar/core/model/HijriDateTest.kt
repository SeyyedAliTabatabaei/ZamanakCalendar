package seyyed.ali.tabatabaei.zamanakCalendar.core.modelimport org.junit.Assert.assertEqualsimport org.junit.Assert.assertFalseimport org.junit.Assert.assertTrueimport org.junit.Testimport seyyed.ali.tabatabaei.zamanakCalendar.core.model.enums.Languageimport seyyed.ali.tabatabaei.zamanakCalendar.core.utils.Constanseclass HijriDateTest {    @Test    fun `test isLeapYear - leap year`() {        assertTrue(HijriDate(1442, 1, 1).isLeapYear())        assertTrue(HijriDate(1445, 1, 1).isLeapYear())        assertTrue(HijriDate(1447, 1, 1).isLeapYear())    }    @Test    fun `test isLeapYear - non-leap year`() {        assertFalse(HijriDate(1408, 1, 1).isLeapYear())        assertFalse(HijriDate(1399, 1, 1).isLeapYear())        assertFalse(HijriDate(1400, 1, 1).isLeapYear())    }    @Test    fun `test getDaysRemainingInYear - normal year`() {        val date = HijriDate(1446, 10, 14)        assertEquals(85, date.getDaysRemainingInYear())    }    @Test    fun `test getDaysRemainingInYear - leap year`() {        val date = HijriDate(1447, 10, 14)        assertEquals(86, date.getDaysRemainingInYear())    }    @Test    fun `test getDayInYear`() {        val date = HijriDate(1446, 10, 14)        assertEquals(280, date.getDayInYear())    }    @Test    fun `test getNumberOfDaysInYear - normal year`() {        val date = HijriDate(1446, 10, 14)        assertEquals(365, date.getNumberOfDaysInYear())    }    @Test    fun `test getNumberOfDaysInYear - leap year`() {        val date = HijriDate(1447, 10, 14)        assertEquals(366, date.getNumberOfDaysInYear())    }    @Test    fun `test getMonthName - persian`() {        val date = HijriDate(1446, 1, 14)        assertEquals(Constanse.hijriPersianMonths[0], date.getMonthName(Language.PERSIAN))    }    @Test    fun `test getMonthName - english`() {        val date = HijriDate(1446, 1, 14)        assertEquals(Constanse.hijriEnglishMonths[0], date.getMonthName(Language.ENGLISH))    }    @Test    fun `test getQuarterNumber`() {        val date = HijriDate(1446, 4, 14)        assertEquals(3, date.getQuarterNumber())    }    @Test    fun `test getQuarter - persian`() {        val date = HijriDate(1446, 4, 14)        assertEquals(Constanse.seasonsPersian[2], date.getQuarter(Language.PERSIAN))    }    @Test    fun `test getWeekNumberOfYear`() {        val date = HijriDate(1446, 10, 14)        assertEquals(40, date.getWeekNumberOfYear())    }    @Test    fun `test getDaysInMonth`() {        val date = HijriDate(1446, 12, 14)        assertEquals(29, date.getDaysInMonth())    }    @Test    fun `test getDaysInMonth - leap year`() {        val date = HijriDate(1447, 12, 14)        assertEquals(30, date.getDaysInMonth())    }    @Test    fun `test getWeekdayName - persian`() {        val date = HijriDate(1447, 10, 14)        val result = date.getWeekdayName(Language.ARABIC)        assertTrue(Constanse.arabicDayOfTheWeek.contains(result))    }    @Test    fun `test getWeekday`() {        val date = HijriDate(1403, 1, 1)        val result = date.getWeekdayNumber()        assertTrue(result in 1..7)    }}